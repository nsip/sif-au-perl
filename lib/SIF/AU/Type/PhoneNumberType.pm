
#PASTOR: Code generated by XML::Pastor/1.0.4 at 'Wed Aug  7 12:13:32 2013'

use utf8;
use strict;
use warnings;
no warnings qw(uninitialized);

use XML::Pastor;



#================================================================

package SIF::AU::Type::PhoneNumberType;

use SIF::AU::Type::AUCodeSetsTelephoneNumberTypeType;
use SIF::AU::Type::AUCodeSetsYesOrNoCategoryType;

our @ISA=qw(XML::Pastor::ComplexType);

SIF::AU::Type::PhoneNumberType->mk_accessors( qw(_Type Number Extension ListedStatus));

# Attribute accessor aliases

sub Type { &_Type; }

SIF::AU::Type::PhoneNumberType->XmlSchemaType( bless( {
         'attributeInfo' => {
                              'Type' => bless( {
                                               'class' => 'SIF::AU::Type::AUCodeSetsTelephoneNumberTypeType',
                                               'documentation' => bless( [
                                                                           bless( {
                                                                                    'text' => 'Code that specifies what type of phone number this is.  Note: A subset of valid values may be specified in data objects.'
                                                                                  }, 'XML::Pastor::Schema::Documentation' )
                                                                         ], 'Data::HashArray' ),
                                               'metaClass' => 'SIF::AU::Pastor::Meta',
                                               'name' => 'Type',
                                               'scope' => 'local',
                                               'targetNamespace' => 'http://www.SIFinfo.org/au/datamodel/1.3',
                                               'type' => 'AUCodeSetsTelephoneNumberTypeType|http://www.SIFinfo.org/au/datamodel/1.3',
                                               'use' => 'required'
                                             }, 'XML::Pastor::Schema::Attribute' )
                            },
         'attributePrefix' => '_',
         'attributes' => [
                           'Type'
                         ],
         'baseClasses' => [
                            'XML::Pastor::ComplexType'
                          ],
         'class' => 'SIF::AU::Type::PhoneNumberType',
         'contentType' => 'complex',
         'documentation' => bless( [
                                     bless( {
                                              'text' => 'This element represents a phone number and occurs within objects such as StudentPersonal, StaffPersonal, etc.'
                                            }, 'XML::Pastor::Schema::Documentation' )
                                   ], 'Data::HashArray' ),
         'elementInfo' => {
                            'Extension' => bless( {
                                                  'class' => 'XML::Pastor::Builtin::normalizedString',
                                                  'documentation' => bless( [
                                                                              bless( {
                                                                                       'text' => 'Phone number extension.'
                                                                                     }, 'XML::Pastor::Schema::Documentation' )
                                                                            ], 'Data::HashArray' ),
                                                  'metaClass' => 'SIF::AU::Pastor::Meta',
                                                  'minOccurs' => '0',
                                                  'name' => 'Extension',
                                                  'nillable' => 'true',
                                                  'scope' => 'local',
                                                  'targetNamespace' => 'http://www.SIFinfo.org/au/datamodel/1.3',
                                                  'type' => 'normalizedString|http://www.w3.org/2001/XMLSchema'
                                                }, 'XML::Pastor::Schema::Element' ),
                            'ListedStatus' => bless( {
                                                     'class' => 'SIF::AU::Type::AUCodeSetsYesOrNoCategoryType',
                                                     'documentation' => bless( [
                                                                                 bless( {
                                                                                          'text' => 'Indicates whether or not the phone number is available to the public.'
                                                                                        }, 'XML::Pastor::Schema::Documentation' )
                                                                               ], 'Data::HashArray' ),
                                                     'metaClass' => 'SIF::AU::Pastor::Meta',
                                                     'minOccurs' => '0',
                                                     'name' => 'ListedStatus',
                                                     'nillable' => 'true',
                                                     'scope' => 'local',
                                                     'targetNamespace' => 'http://www.SIFinfo.org/au/datamodel/1.3',
                                                     'type' => 'AUCodeSetsYesOrNoCategoryType|http://www.SIFinfo.org/au/datamodel/1.3'
                                                   }, 'XML::Pastor::Schema::Element' ),
                            'Number' => bless( {
                                               'class' => 'XML::Pastor::Builtin::normalizedString',
                                               'documentation' => bless( [
                                                                           bless( {
                                                                                    'text' => 'Phone number.  Free-form, but typical Australian formats include:'
                                                                                  }, 'XML::Pastor::Schema::Documentation' )
                                                                         ], 'Data::HashArray' ),
                                               'metaClass' => 'SIF::AU::Pastor::Meta',
                                               'minOccurs' => '0',
                                               'name' => 'Number',
                                               'scope' => 'local',
                                               'targetNamespace' => 'http://www.SIFinfo.org/au/datamodel/1.3',
                                               'type' => 'normalizedString|http://www.w3.org/2001/XMLSchema'
                                             }, 'XML::Pastor::Schema::Element' )
                          },
         'elements' => [
                         'Number',
                         'Extension',
                         'ListedStatus'
                       ],
         'isRedefinable' => 1,
         'metaClass' => 'SIF::AU::Pastor::Meta',
         'name' => 'PhoneNumberType',
         'scope' => 'global',
         'targetNamespace' => 'http://www.SIFinfo.org/au/datamodel/1.3'
       }, 'XML::Pastor::Schema::ComplexType' ) );

1;


__END__



=head1 NAME

B<SIF::AU::Type::PhoneNumberType>  -  A class generated by L<XML::Pastor> . 


=head1 DESCRIPTION

This element represents a phone number and occurs within objects such as StudentPersonal, StaffPersonal, etc.


=head1 ISA

This class descends from L<XML::Pastor::ComplexType>.


=head1 CODE GENERATION

This module was automatically generated by L<XML::Pastor> version 1.0.4 at 'Wed Aug  7 12:13:32 2013'


=head1 ATTRIBUTE ACCESSORS

=over

=item B<_Type>(), B<Type>()      - See L<SIF::AU::Type::AUCodeSetsTelephoneNumberTypeType>.

=back


=head1 CHILD ELEMENT ACCESSORS

=over

=item B<Extension>()      - See L<XML::Pastor::Builtin::normalizedString>.

=item B<ListedStatus>()      - See L<SIF::AU::Type::AUCodeSetsYesOrNoCategoryType>.

=item B<Number>()      - See L<XML::Pastor::Builtin::normalizedString>.

=back


=head1 SEE ALSO

L<XML::Pastor::ComplexType>, L<XML::Pastor>, L<XML::Pastor::Type>, L<XML::Pastor::ComplexType>, L<XML::Pastor::SimpleType>


=cut
